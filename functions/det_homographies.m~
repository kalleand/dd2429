% H = det_homographies(points1, points2)
%
% Method: Determines the mapping H * points1 = points2
% 
% Input:  points1, points2 are of the form (3,n) with 
%         n is the amount of points 
%         The points should be normalized for 
%         better performance 
% 
% Output: H (3,3) matrix 
%

function H = det_homographies(points1, points2)

am_points = size(points1, 2);

% Removal of NaN points. (The points which are on the other image.)
no_nan_points1 = [];
no_nan_points2 = [];
for i = 1:am_points
    if not(isnan(points1(1,i)))
        no_nan_points1 = [no_nan_points1, points1(:,i)];
        no_nan_points2 = [no_nan_points2, points2(:,i)];
    end
end


am_points = size(no_nan_points1, 2);

% alpha = (x_i, y_i, 1, 0, 0, 0, -x_i*x_ref, -y_i*x_ref, -x_ref)
alpha = [no_nan_points1(1:2,:);
    ones(1,am_points);
    zeros(3,am_points);
    -(no_nan_points1(1,:)).*no_nan_points2(1,:); 
    -(no_nan_points1(2,:)).*no_nan_points2(1,:);
    -(no_nan_points2(1,:))].';

% beta = (0, 0, 0, x_i, y_i, 1, -x_i*y_ref, -y_i*y_ref, -y_ref)
beta = [zeros(3,am_points);
    no_nan_points1(1:2,:);
    ones(1,am_points);
    -(no_nan_points1(1,:)).*no_nan_points2(2,:);
    -(no_nan_points1(2,:)).*no_nan_points2(2,:);
    -(no_nan_points2(2,:))].';
    

Q = [alpha; beta];

[~,~,V] = svd(Q);

h = V(:,end);

H = [h(1:3).'; h(4:6).'; h(7:9).'];
